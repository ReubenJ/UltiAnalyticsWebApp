// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  angular.module('newBetaApp').factory('lineStats', [
    '$q', 'filter', 'teamStats', 'utils', function($q, filter, teamStats, utils) {
      var api, countEvent, deferred, getAllPoints, getBubbleMapStats, getConnectionStats, getConsideredPoints, getDatafulPlayers, getPointSpread, makeChild;
      deferred = $q.defer();
      teamStats.then(function(response) {
        teamStats = response;
        return deferred.resolve(api);
      });
      getConsideredPoints = function(games, players) {
        var consideredPoints;
        consideredPoints = [];
        _.each(games, function(game) {
          return _.each(game.points, function(point) {
            if (_.intersection(point.line, players).length === players.length) {
              return consideredPoints.push(point);
            }
          });
        });
        return consideredPoints;
      };
      getDatafulPlayers = function(points, players) {
        return _.reduce(points, function(map, point) {
          _.each(point.line, function(player) {
            return map[player] = true;
          });
          return map;
        }, {});
      };
      getConnectionStats = function(points, players) {
        var combinations;
        if (players.length < 2) {
          return false;
        }
        combinations = {};
        _.each(points, function(point) {
          return _.each(point.events, function(event) {
            var connectionRef, _name, _name1;
            if (_(players).contains(event.passer) && _(players).contains(event.receiver)) {
              connectionRef = combinations[_name = "Outcomes of " + event.passer + " throwing to " + event.receiver] != null ? combinations[_name] : combinations[_name] = {
                total: 0
              };
              if (connectionRef[_name1 = event.action] == null) {
                connectionRef[_name1] = 0;
              }
              connectionRef[event.action]++;
              return connectionRef.total++;
            }
          });
        });
        if (_.keys(combinations).length === 0) {
          return 'none';
        }
        return combinations;
      };
      getPointSpread = function(points) {
        var spread;
        spread = _.countBy(points, function(point) {
          if (point.events[point.events.length - 1].type === 'Offense') {
            return 'ours';
          } else {
            return 'theirs';
          }
        });
        if (spread.ours == null) {
          spread.ours = 0;
        }
        if (spread.theirs == null) {
          spread.theirs = 0;
        }
        return spread;
      };
      getAllPoints = function(games) {
        return _.reduce(games, function(total, game) {
          return total.concat(game.points);
        }, []);
      };
      makeChild = function(name, countedEvents) {
        var box;
        box = {
          playerName: name,
          isPlayer: true,
          value: 0,
          stats: {}
        };
        _.each(countedEvents, function(name) {
          return box.stats[name] = 0;
        });
        return box;
      };
      countEvent = function(player, eventType) {
        player.stats[eventType]++;
        return player.value++;
      };
      getBubbleMapStats = function(points, players) {
        var bubbleStats, children, countedEvents, num, numberOfFillers, playersLookup, _i;
        countedEvents = ['Throwaway', 'Catch', 'Goal', 'D', 'Assist'];
        children = _.reduce(players, function(boxes, player) {
          boxes[player] = makeChild(player, countedEvents);
          return boxes;
        }, {});
        children.team = makeChild('Average', countedEvents);
        children.team.isPlayer = false;
        playersLookup = _.reduce(players, function(obj, player) {
          obj[player] = true;
          return obj;
        }, {});
        _.each(points, function(point) {
          return _.each(point.events, function(event) {
            if (_(countedEvents).contains(event.action)) {
              if (event.action === 'Throwaway') {
                if (playersLookup[event.passer]) {
                  return countEvent(children[event.passer], 'Throwaway');
                } else {
                  return countEvent(children.team, 'Throwaway');
                }
              } else if (event.action === 'Goal') {
                if (playersLookup[event.passer]) {
                  countEvent(children[event.passer], 'Assist');
                } else {
                  countEvent(children.team, 'Assist');
                }
                if (playersLookup[event.receiver]) {
                  return countEvent(children[event.receiver], 'Goal');
                } else {
                  return countEvent(children.team, 'Goal');
                }
              } else if (event.action === 'D') {
                if (playersLookup[event.defender]) {
                  return countEvent(children[event.defender], 'D');
                } else {
                  return countEvent(children.team, 'D');
                }
              } else if (event.action === 'Catch') {
                if (playersLookup[event.receiver]) {
                  return children[event.receiver].value++;
                } else {
                  return children.team.value++;
                }
              }
            }
          });
        });
        numberOfFillers = 6 - _.keys(children).length;
        children.team.value = children.team.value / 7;
        _.each(children, function(child) {
          return child.stats = _.reduce(child.stats, function(arr, val, name) {
            arr.push({
              label: name,
              value: val
            });
            return arr;
          }, []);
        });
        bubbleStats = {
          children: utils.objToArr(children)
        };
        for (num = _i = 0; 0 <= numberOfFillers ? _i <= numberOfFillers : _i >= numberOfFillers; num = 0 <= numberOfFillers ? ++_i : --_i) {
          bubbleStats.children.push(_.clone(children.team));
        }
        _.each(bubbleStats.children, function(child) {
          child.id = Math.random().toString().slice(2);
          return child.value = Math.pow(child.value, 3);
        });
        return bubbleStats;
      };
      api = {
        getStats: function(players) {
          var consideredPoints, dPoints, oPoints, pointSpread, results;
          consideredPoints = getConsideredPoints(filter.included, players);
          oPoints = _.filter(consideredPoints, function(point) {
            return point.summary.lineType === 'O';
          });
          dPoints = _.filter(consideredPoints, function(point) {
            return point.summary.lineType === 'D';
          });
          pointSpread = getPointSpread(consideredPoints);
          results = {
            numberOfPointsConsidered: consideredPoints.length,
            pointsPossible: getAllPoints(filter.included).length,
            teamStats: {
              conversionRate: "" + (teamStats.getConversionRate(consideredPoints, pointSpread.ours)) + "%",
              pointSpread: "" + (pointSpread.ours || 0) + " - " + (pointSpread.theirs || 0),
              oProductivity: "" + (teamStats.getProductivity(consideredPoints, 'Offense') || 'NA') + "%",
              dProductivity: "" + (teamStats.getProductivity(consideredPoints, 'Defense') || 'NA') + "%"
            },
            connectionStats: getConnectionStats(consideredPoints, players),
            bubbleStats: getBubbleMapStats(consideredPoints, players),
            datafulPlayers: getDatafulPlayers(consideredPoints, players)
          };
          return results;
        },
        getForTeam: function() {
          var consideredPoints, pointSpread;
          consideredPoints = getAllPoints(filter.included);
          pointSpread = getPointSpread(consideredPoints);
          return {
            conversionRate: "" + (teamStats.getConversionRate(consideredPoints, pointSpread.ours)) + "%",
            pointSpread: "" + (pointSpread.ours || 0) + " - " + (pointSpread.theirs || 0),
            oProductivity: "" + (teamStats.getProductivity(consideredPoints, 'Offense') || 'NA') + "%",
            dProductivity: "" + (teamStats.getProductivity(consideredPoints, 'Defense') || 'NA') + "%"
          };
        }
      };
      return deferred.promise;
    }
  ]);

}).call(this);
