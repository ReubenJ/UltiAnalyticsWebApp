// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  angular.module('newBetaApp').controller('LineCtrl', [
    '$scope', '$q', 'team', 'lineStats', 'LineView', 'filter', 'viewer', 'savedState', function($scope, $q, team, lineStats, LineView, filter, viewer, savedState) {
      var scope, setFromSaved;
      scope = $scope;
      scope.dragging;
      scope.includedGames = filter.included;
      $scope.loading = true;
      scope.lineViews = [];
      $scope._bind = _.bind;
      scope.lineViews.push(new LineView);
      if (viewer.isLargeScreen()) {
        scope.lineViews.push(new LineView);
      }
      scope.selectedLineView = _.first(scope.lineViews);
      $q.all([lineStats, team]).then(function(response) {
        team = response[1];
        lineStats = response[0];
        savedState = savedState.getOnce();
        $scope.players = _.pluck(team.players, 'name');
        $scope.teamStats = lineStats.getForTeam();
        if (savedState.lines) {
          setFromSaved(savedState.lines);
        } else {
          _.each(scope.lineViews, function(lineView) {
            return lineView.addLine();
          });
        }
        return $scope.loading = false;
      });
      scope.$watchCollection('includedGames', function(update, old) {
        if (update && lineStats.getStats) {
          _(scope.lines).each(function(line) {
            return line.updateStats();
          });
          return $scope.teamStats = lineStats.getForTeam();
        }
      });
      scope.setDragging = function(player) {
        return scope.dragging = player;
      };
      scope.addPlayerToSelected = function(player) {
        return scope.selectedLineView.selectedLine.addPlayers(player);
      };
      scope.isSelectedLineView = function(lineView) {
        return scope.selectedLineView === lineView;
      };
      scope.selectLineView = function(lineView) {
        scope.selectedLineView = lineView;
        return lineView.selectedLine.updateStats();
      };
      scope._keys = _.keys;
      scope._contains = _.contains;
      scope.isNumber = function(item) {
        return typeof item === 'number';
      };
      scope.floor = Math.floor;
      scope.getSharedData = function() {
        var data;
        data = scope.$parent.getSharedData();
        data.lines = [];
        _.each(scope.lineViews, function(view, lvIndex) {
          return _.each(view.lines, function(line) {
            console.log(line.getPlayers());
            return data.lines.push({
              players: line.getPlayers(),
              index: lvIndex,
              isSelected: view.isSelectedLine(line)
            });
          });
        });
        return data;
      };
      return setFromSaved = function(lineObjects) {
        return _.each(lineObjects, function(lineObj) {
          var appropriateLineView, line;
          appropriateLineView = $scope.lineViews[lineObj.index % $scope.lineViews.length];
          line = appropriateLineView.addLine(true);
          line.addPlayers(lineObj.players);
          if (lineObj.isSelected) {
            return appropriateLineView.selectLine(line);
          }
        });
      };
    }
  ]);

}).call(this);
